# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger: 
- master
  
name: $(MajorVersion).$(MinorVersion).$(date:yy)$(DayOfYear).0

pool:
  vmImage: 'windows-latest'

variables:
- group: uwp-pipeline
- name: solution
  value: '**/RetroArch-msvc2017-UWP.sln'
- name: buildPlatform
  value: 'x64'
- name: buildConfiguration
  value: 'ReleaseANGLE'
- name: appxPackageDir
  value: '$(build.artifactStagingDirectory)\AppxPackages\\'
- name: pfxpath 
  value: '$(build.SourcesDirectory)\RetroCert.pfx'
- name: build  
  value: '$(Build.BuildId)'
- name: MajorVersion
  value: '20'
- name: MinorVersion
  value: '1'
- name: 'customBuildNumber'
  value: '$(MajorVersion).$(MinorVersion).$(date:yy)$(DayOfYear)$(rev:.r)'

steps:
#- task: DownloadSecureFile@1
  #name: mySecureFile
  #displayName: 'Get the pfx file certificate'
  #inputs:
    #secureFile: 'RetroCert.pfx'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
    
      #Import the certificate included in the repo
      Write-Host "Import Certificate" 
      $pfxpath = '$(pfxpath)'
      $password = 'test'
      Add-Type -AssemblyName System.Security
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($pfxpath, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      $store.Add($cert)
      $store.Close()

#Auto-increment the build number for store submission      
- task: VersionAPPX@2
  inputs:
    Path: '$(Build.SourcesDirectory)'
    VersionNumber: '$(Build.BuildNumber)'
    InjectVersion: False
    VersionRegex: '(0|[1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])(\.(0|[1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])){3}'
    OutputVersion: 'OutputedVersion'

#Build the package
- task: VSBuild@1
  inputs:
    platform: 'x64'
    solution: '$(solution)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload'